---

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Europe/Kiev
  KEEP_LATEST_RELEASES: 3
  DELETE_ONLY_PRE_RELEASES: false

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine latest stable OpenWrt version
        id: openwrt_version
        run: |
          echo "Fetching latest stable OpenWrt version..."
          LATEST_VERSION=$(curl -s https://api.github.com/repos/openwrt/openwrt/releases | jq -r '[.[] | select(.prerelease == false)][0].tag_name')
          if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to determine latest stable version. Defaulting to openwrt-23.05"
            LATEST_VERSION="openwrt-23.05"
          fi
          echo "Latest stable OpenWrt version: $LATEST_VERSION"
          echo "REPO_BRANCH=$LATEST_VERSION" >> $GITHUB_ENV
          echo "repo_branch=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Clone source code
        run: |
          echo "Cloning OpenWrt repository branch: ${{ env.REPO_BRANCH }}"
          git clone $REPO_URL -b $REPO_BRANCH --depth 1 openwrt
          if [ ! -d "openwrt" ]; then
            echo "Error: Failed to clone OpenWrt repository"
            exit 1
          fi
          ln -sf $GITHUB_WORKSPACE/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clean up disk space
        run: |
          sudo apt-get autoremove -y && sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          if command -v docker &> /dev/null; then
            docker rmi $(docker image ls -aq) || true
          fi
          df -h

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          if [ -e "files" ]; then
            echo "Moving custom files"
            mv files openwrt/files
          else
            echo "No custom files to move"
          fi
          if [ -e "$CONFIG_FILE" ]; then
            echo "Moving custom config file"
            mv "$CONFIG_FILE" openwrt/.config
          else
            echo "Custom config file not found, using default"
          fi
          if [ -f "$DIY_P2_SH" ]; then
            chmod +x "$DIY_P2_SH"
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P2_SH
          else
            echo "Custom script $DIY_P2_SH not found, skipping"
          fi

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo "Compiling with $(nproc) threads"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@v4
        if: env.UPLOAD_BIN_DIR == 'true' && !cancelled()
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Get latest OpenWrt changes
        id: openwrt_changes
        run: |
          echo "Fetching latest OpenWrt changes from GitHub API..."
          changes=$(curl -s 'https://api.github.com/repos/openwrt/openwrt/commits?sha=${{ env.REPO_BRANCH }}' | 
                    jq -r '.[:10] | map("- " + (.commit.author.date | .[0:10]) + ": " + (.commit.message | split("\n")[0])) | .[]')
          
          echo "Debug: Latest OpenWrt changes:"
          echo "$changes"
          
          if [ -z "$changes" ]; then
            echo "Warning: No changes fetched. Using placeholder message."
            changes="Unable to fetch recent changes. Please check the OpenWrt repository for updates."
          fi
          
          echo "formatted_changes<<EOF" >> $GITHUB_OUTPUT
          echo "$changes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=${{ steps.openwrt_version.outputs.repo_branch }}-$(date +"%Y.%m.%d")${{ env.FILE_DATE }}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*
          body: |
            This is an automated build of OpenWrt firmware for supported devices.
            Built on: ${{ steps.tag.outputs.release_tag }}
            
            Device: ${{ env.DEVICE_NAME || 'Unknown' }}
            
            ${{ env.FIRMWARE != '' && 'Firmware can be found in the assets below.' || 'No firmware files were generated.' }}
            
            Recent OpenWrt changes:
            ${{ steps.openwrt_changes.outputs.formatted_changes || 'No recent changes information available.' }}

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
          delete_workflow_pattern: build-openwrt.yml
          delete_run_by_conclusion_pattern: success,failure,cancelled

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.3.3
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: ${{ env.KEEP_LATEST_RELEASES }}
          delete_tags: true
          delete_prerelease_only: ${{ env.DELETE_ONLY_PRE_RELEASES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check compilation result
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          echo "=== Firmware files ==="
          ls -lh
          echo "======================"
          echo "DEVICE_NAME: ${{ env.DEVICE_NAME }}"
          echo "FILE_DATE: ${{ env.FILE_DATE }}"
          
      - name: Check environment
        run: |
          echo "Checking required tools..."
          for tool in git make gcc g++ unzip wget curl; do
            if ! command -v $tool &> /dev/null; then
              echo "$tool is not installed. Please add it to the workflow."
              exit 1
            fi
          done
          echo "All required tools are available."
          
