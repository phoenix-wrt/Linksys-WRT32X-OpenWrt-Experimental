---
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Optimized Build OpenWrt using GitHub Actions (includes update_hosts.sh)
#
# Modifications:
# - Added a pre-check for disk space before starting the build to ensure sufficient space.
# - Merged sudo operations and cleanup steps to minimize overhead.
# - Set a retry mechanism for package downloads to handle intermittent network issues.
# - Implemented multi-threading for faster package download and build processes.
# - Added additional logging for better visibility into disk space usage and system info.
# - Improved error handling by providing retry mechanisms for critical steps (e.g., package download, compilation).
# - Consolidated directory and permission setup steps for efficiency.
# - Added logic to dynamically fetch and set the latest OpenWrt tag when available, using the master branch as a fallback.
# - Refined conditional logic for the optional steps such as firmware upload and release creation to minimize unnecessary runs.
# - Ensured that small-sized (under 1KB) incomplete downloads are removed during the download stage.
# - Updated the hosts file update script (`update_hosts.sh`) to ensure better error handling and proper clean-up after execution.
# - Reduced unnecessary re-execution of certain steps by optimizing dependencies.
# - Added conditional checks for disk space usage throughout the process to prevent build failures due to insufficient space.
# - Improved the cleanup process for older GitHub Actions workflow runs and releases for better repository management.
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Europe/Kiev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Pre-check: Disk space and System Info
        run: |
          echo "Checking system information and available disk space..."
          df -hT
          echo "System Info:"
          uname -a
          AVAILABLE_SPACE=$(df -hT . | awk 'NR==2 {print $5}' | sed 's/%//')
          if [ "$AVAILABLE_SPACE" -ge 90 ]; then
              echo "Insufficient disk space. Available: $AVAILABLE_SPACE%. Aborting."
              exit 1
          else
              echo "Sufficient disk space available: $AVAILABLE_SPACE%."
          fi

      - name: Setup environment and dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "Cleaning and updating environment..."
          sudo apt-get update -qq && sudo apt-get install -qq --no-install-recommends \
              $(curl -fsSL git.io/depends-ubuntu-2004) && sudo apt-get clean
          sudo timedatectl set-timezone "$TZ"
          mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir

      - name: Clone the latest OpenWrt source code
        working-directory: /workdir
        run: |
          echo "Cloning latest OpenWrt repository..."
          LATEST_TAG=$(git ls-remote --tags --sort="v:refname" $REPO_URL | grep -v \
              '\^{}' | tail -n1 | sed 's/.*\///')
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found, using default branch 'master'."
            git clone --depth 1 $REPO_URL openwrt
          else
            echo "Cloning latest tag: $LATEST_TAG"
            git clone --depth 1 --branch $LATEST_TAG $REPO_URL openwrt
          fi
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds and scripts
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update and install feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Add custom update_hosts.sh script
        run: |
          cat << 'EOF' > openwrt/package/base-files/files/usr/bin/update_hosts.sh
          #!/bin/sh

          CHECK_URL="https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-social/hosts"
          HOSTS_FILE="/etc/hosts"
          LAST_DATE_FILE="/etc/last_update_date"
          TMP_FILE="/tmp/hosts_tmp"

          if wget -qO $TMP_FILE $CHECK_URL; then
              NEW_DATE=$(grep "^# Date:" $TMP_FILE | awk '{$1=""; print $0}')
              if [ -f "$LAST_DATE_FILE" ]; then
                  LAST_DATE=$(cat $LAST_DATE_FILE)
              else
                  LAST_DATE=""
              fi

              if [ "$NEW_DATE" != "$LAST_DATE" ]; then
                  mv $TMP_FILE $HOSTS_FILE
                  echo "$NEW_DATE" > $LAST_DATE_FILE
                  /etc/init.d/dnsmasq restart
              fi
          else
              echo "Failed to download hosts file."
              exit 1
          fi

          [ -f "$TMP_FILE" ] && rm $TMP_FILE
          EOF

          chmod +x openwrt/package/base-files/files/usr/bin/update_hosts.sh

      - name: Check and update default feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: Download and verify packages
        run: |
          cd openwrt
          make defconfig
          make download -j$(nproc) || { echo "Download failed, retrying..."; make download -j$(nproc); }
          find dl -size -1024c -exec rm -f {} +

      - name: Compile firmware
        run: |
          cd openwrt
          make -j$(nproc) || { echo "Initial build failed, retrying with verbose output..."; make -j1 V=s; }
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Post-build: Check disk space usage
        run: df -h /

      - name: Upload binary directory (optional)
        uses: actions/upload-artifact@v3
        if: success() && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize firmware files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload firmware
        uses: actions/upload-artifact@v3
        if: env.UPLOAD_FIRMWARE == 'true'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Create release tag (optional)
        if: env.UPLOAD_RELEASE == 'true'
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"

      - name: Upload firmware to GitHub Release (optional)
        uses: softprops/action-gh-release@v1
        if: success() && env.UPLOAD_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*

      - name: Cleanup old workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old releases (optional)
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true'
        with:
          keep_last: 3
