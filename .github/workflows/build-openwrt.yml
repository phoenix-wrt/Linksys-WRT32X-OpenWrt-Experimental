# File: .github/workflows/build-openwrt.yml
---
# Inspired by P3TERX <https://p3terx.com>
#
# This file is part of Project Name and is released under the MIT License.
# See the LICENSE file for more details.
#
# Description: This workflow automates the build process for OpenWrt firmware.
#
# Key features:
# Source and Configuration:
# - Customizable OpenWrt source and branch
# - Support for custom feeds and configurations
# - Intelligent build triggering based on relevant OpenWrt changes
#
# Build Process:
# - Automatic package downloads and compilation
# - Caching of build dependencies for faster subsequent builds
# - Multi-threaded compilation
# - Disk space optimization
# - Custom script for updating hosts file
#
# Artifacts and Releases:
# - Flexible artifact upload options
# - Automatic firmware upload to GitHub releases
# - Informative naming for artifacts and releases
# - Automatic inclusion of recent OpenWrt changes in release notes
#
# Maintenance and Optimization:
# - Automatic cleanup of old workflow runs and releases
# - Configurable retention of releases and pre-releases
# - Post-build disk usage check
#
# Environment and Error Handling:
# - Timezone configuration
# - Enhanced error handling and logging in custom scripts

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Europe/Kiev
  BUILD_THREADS: 3
  HOSTS_URL: https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-social/hosts
  CACHE_KEY: openwrt-cache
  KEEP_LATEST_RELEASES:
  DELETE_ONLY_PRE_RELEASES:

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      changes: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest OpenWrt changes
        id: openwrt_changes
        run: |
          changes=$(curl -s 'https://git.openwrt.org/?p=openwrt/openwrt.git;a=log;h=HEAD' | 
                    grep -P '^\w{40}' | 
                    sed -n '1,50p')
          echo "$changes" > changes.txt
          formatted_changes=$(echo "$changes" | 
                              sed -n '1,10p' | 
                              awk '{print "- " $2 " " $3 ": " $0}' | 
                              sed 's/^- [0-9a-f]\{40\} //')
          echo "formatted_changes<<EOF" >> $GITHUB_OUTPUT
          echo "$formatted_changes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Display changes.txt content
        run: |
          echo "Content of changes.txt:"
          cat changes.txt

      - name: Check for relevant changes
        id: check
        run: |
          config_changes=$(grep -f $CONFIG_FILE changes.txt || true)
          echo "Relevant changes found:"
          echo "$config_changes"
          if [ -n "$config_changes" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "changes<<EOF" >> $GITHUB_OUTPUT
            echo "$config_changes" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "changes=${{ steps.openwrt_changes.outputs.formatted_changes }}" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_changes
    if: needs.check_changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clean up disk space
        run: |
          sudo apt-get remove --purge -y man-db
          sudo apt-get clean
          sudo rm -rf /usr/local/share/locale
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /tmp/*
          sudo rm -rf /workdir/*

      - name: Clone source code
        working-directory: /workdir
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Create update_hosts.sh
        run: |
          mkdir -p openwrt/files/usr/bin
          cat << 'EOF' > openwrt/files/usr/bin/update_hosts.sh
          #!/bin/sh
          set -e

          CHECK_URL="${HOSTS_URL}"
          HOSTS_FILE="/etc/hosts"
          LAST_DATE_FILE="/etc/last_update_date"
          TMP_FILE="/tmp/hosts_tmp"

          if ! curl -sSfL "$CHECK_URL" -o "$TMP_FILE"; then
              echo "Failed to download hosts file" >&2
              exit 1
          fi

          NEW_DATE=$(sed -n 's/^# Date: //p' "$TMP_FILE")
          [ -f "$LAST_DATE_FILE" ] && LAST_DATE=$(cat "$LAST_DATE_FILE") || LAST_DATE=""

          if [ "$NEW_DATE" != "$LAST_DATE" ]; then
              mv "$TMP_FILE" "$HOSTS_FILE"
              echo "$NEW_DATE" > "$LAST_DATE_FILE"
              if ! /etc/init.d/dnsmasq restart; then
                  echo "Failed to restart dnsmasq" >&2
                  exit 1
              fi
              echo "Hosts file updated successfully"
          else
              rm -f "$TMP_FILE"
              echo "Hosts file is already up to date"
          fi
          EOF
          chmod +x openwrt/files/usr/bin/update_hosts.sh

      - name: Cache OpenWrt build dependencies
        uses: actions/cache@v3
        with:
          path: |
            openwrt/dl
            openwrt/staging_dir
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('openwrt/.config') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_KEY }}-

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "${BUILD_THREADS} thread compile"
          make -j${BUILD_THREADS} || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: Release ${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          files: ${{ env.FIRMWARE }}/*
          body: |
            Automated release for device ${{ env.DEVICE_NAME }} on ${{ env.FILE_DATE }}

            Changes in this release:
            ${{ needs.check_changes.outputs.changes }}

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
          delete_workflow_pattern: build-openwrt.yml
          delete_run_by_conclusion_pattern: success,failure,cancelled

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.3.2
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: ${{ env.KEEP_LATEST_RELEASES || 3 }}
          delete_tags: true
          delete_only_pre_releases: ${{ env.DELETE_ONLY_PRE_RELEASES || false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
